<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Energy-Saving Notifications</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">
</head>

<body>
    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
        <div class="logo">Home Automation</div>
        <ul>
            <li><a href="/"><i class="fas fa-home"></i> Home</a></li>
            <li><a href="/features"><i class="fas fa-cogs"></i> Features</a></li>
            <li><a href="/dashboard"><i class="fas fa-chart-pie"></i> Dashboard</a></li>
            <li><a href="/chat"><i class="fas fa-comments"></i> Chat with ChatGPT</a></li>
            <li><a href="/notifications" class="active"><i class="fas fa-bell"></i> Notifications</a></li>
            <li><a href="/rooms-data"><i class="fas fa-database"></i> Rooms Data</a></li>
            <li><a href="/login"><i class="fas fa-user"></i> Login</a></li>
            <li><a href="/about"><i class="fas fa-info-circle"></i> About Us</a></li>
            <li><a href="/contact"><i class="fas fa-envelope"></i> Contact Us</a></li>
        </ul>
    </div>

    <!-- Hamburger menu -->
    <div class="toggle-btn" onclick="toggleSidebar()">
        &#9776;
    </div>

    <!-- Main content -->
    <div class="main-content" id="main-content">
        <section class="notifications-container">
            <h3>Energy-Saving Notifications and AI Advice</h3>

            <!-- Dropdown for advice groups -->
            <label for="advice-group">Select Advice Group:</label>
            <select id="advice-group" onchange="fetchNotifications()">
                <% groups.forEach(group=> { %>
                    <option value="<%= group.GroupID %>" <%=group.GroupID===selectedGroup ? 'selected' : '' %>>
                        <%= group.GroupName %>
                    </option>
                    <% }); %>
            </select>










            <!-- Generate Advice Button -->
            <button id="generate-advice" onclick="generateAdvice()">Generate New Advice</button>

            <button id="show-top-10" onclick="fetchTopAdvice()">Show Top 10 Advice</button>

            <!-- Notifications Grid -->
            <!-- Notifications Grid -->
            <div class="notifications-grid" id="notifications-grid">
                <% if (notifications.length === 0) { %>
                    <div class="notification-card no-data">
                        <i class="fas fa-info-circle"></i>
                        <p>No notifications available at the moment.</p>
                    </div>
                <% } else { %>
                    <% notifications.forEach(notification => { %>
                        <div class="notification-card" data-room-number="<%= notification.roomNumber %>" data-group-id="<%= selectedGroup %>">
                            <i class="fas fa-lightbulb"></i>
                            <p>
                                Room <%= notification.roomNumber %>: "<%= notification.adviceText %>"
                            </p>
                            <!-- Icons for trash and star -->
                            <div class="icons-container">
                                <i id="trash-icon" class="fas fa-trash trash-icon" onclick="deleteAdvice(this)" data-room-number="<%= notification.roomNumber %>" data-group-id="<%= selectedGroup %>"></i>
                                <i id="star-icon" class="fas fa-star star-icon" onclick="favoriteAdvice(this)" data-room-number="<%= notification.roomNumber %>" data-group-id="<%= selectedGroup %>"></i>
                            </div>
                        </div>
                    <% }); %>
                <% } %>
            </div>
            

        </section>
    </div>

    <script>
        // Fetch notifications for the selected advice group
        function fetchNotifications() {
            const groupId = document.getElementById('advice-group').value;
            window.location.href = `/notifications?group=${groupId}`;
        }



        function fetchTopAdvice() {
            const notificationsGrid = document.getElementById('notifications-grid');
            notificationsGrid.innerHTML = `
            <div class="notification-card">
                <i class="fas fa-spinner fa-spin"></i>
                <p>Fetching top advice... Please wait.</p>
            </div>
        `;

            fetch('/notifications/top')
                .then((response) => {
                    if (!response.ok) {
                        throw new Error('Failed to fetch top advice.');
                    }
                    return response.json();
                })
                .then((data) => {
                    notificationsGrid.innerHTML = ''; // Clear existing notifications

                    if (data.topAdvice.length === 0) {
                        notificationsGrid.innerHTML = `
                        <div class="notification-card no-data">
                            <i class="fas fa-info-circle"></i>
                            <p>No top advice available at the moment.</p>
                        </div>
                    `;
                    } else {
                        const container = document.createElement('div');
                        container.className = 'top-advice-container';

                        const title = document.createElement('div');
                        title.className = 'top-advice-title';
                        title.textContent = 'Top 10 Energy-Saving Advice';
                        container.appendChild(title);

                        data.topAdvice.forEach((advice, index) => {
                            const adviceCard = document.createElement('div');
                            adviceCard.className = 'advice-card';

                            const rank = document.createElement('div');
                            rank.className = 'advice-rank';
                            rank.textContent = `#${index + 1}`;

                            const adviceText = document.createElement('div');
                            adviceText.className = 'advice-text';
                            adviceText.textContent = advice;

                            adviceCard.appendChild(rank);
                            adviceCard.appendChild(adviceText);
                            container.appendChild(adviceCard);
                        });

                        notificationsGrid.appendChild(container);
                    }
                })
                .catch((error) => {
                    console.error('Error fetching top advice:', error);
                    alert('Failed to fetch top advice. Please try again later.');
                });
        }

        // Generate new advice
        function generateAdvice() {
            const notificationsGrid = document.getElementById('notifications-grid');
            notificationsGrid.innerHTML = `
        <div class="notification-card">
            <i class="fas fa-spinner fa-spin"></i>
            <p>Generating advice... Please wait.</p>
        </div>
    `;

            fetch('/notifications/generate', { method: 'POST' })
                .then((response) => {
                    if (!response.ok) {
                        return response.json().then(err => { throw new Error(err.error || 'Failed to generate advice.'); });
                    }
                    return response.json();
                })
                .then((data) => {
                    notificationsGrid.innerHTML = ''; // Clear existing notifications

                    if (data.notifications.length === 0) {
                        notificationsGrid.innerHTML = `
                    <div class="notification-card no-data">
                        <i class="fas fa-info-circle"></i>
                        <p>No new advice generated.</p>
                    </div>
                `;
                    } else {
                        data.notifications.forEach((notification) => {
                            const notificationCard = document.createElement('div');
                            notificationCard.className = 'notification-card';
                            notificationCard.innerHTML = `
                        <i class="fas fa-lightbulb"></i>
                        <p>${notification}</p>
                    `;
                            notificationsGrid.appendChild(notificationCard);
                        });
                    }
                })
                .catch((error) => {
                    console.error('Error generating advice:', error);
                    alert(`Error: ${error.message}`);
                });
        }

         // Delete advice
function deleteAdvice(element) {
    const roomNumber = element.getAttribute('data-room-number');
    const groupId = element.getAttribute('data-group-id');

    console.log('Attempting to delete advice for:', { roomNumber, groupId }); // Debug log

    fetch('/notifications/delete', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ roomNumber, groupId })
    })
        .then(response => response.json())
        .then(data => {
            console.log('Delete response:', data); // Debug log
            if (data.success) {
                alert('Advice deleted successfully!');
                element.closest('.notification-card').remove(); // Remove the card
            }
        })
        .catch(error => console.error('Error deleting advice:', error));
}

// Mark advice as favorite
function favoriteAdvice(element) {
    const roomNumber = element.getAttribute('data-room-number');
    const groupId = element.getAttribute('data-group-id');

    console.log('Attempting to favorite advice for:', { roomNumber, groupId }); // Debug log

    fetch('/notifications/favorite', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ roomNumber, groupId })
    })
        .then(response => response.json())
        .then(data => {
            console.log('Favorite response:', data); // Debug log
            if (data.success) {
                element.style.color = 'gold'; // Highlight the star icon
                alert('Advice marked as favorite!');
            }
        })
        .catch(error => console.error('Error marking as favorite:', error));
}

    </script>
    <script src="/js/frontend.js"></script>
</body>

</html>